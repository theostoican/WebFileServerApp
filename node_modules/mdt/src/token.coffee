module.exports = (src, top, bq) ->
  src = src.replace(/^ +$/gm, '')
  while src
    # newline
    if cap = @rules.newline.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'space'
        content: cap[0]
    # code
    if cap = @rules.code.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'code'
        content: cap[0]
      continue
    # fences (gfm)
    if cap = @rules.fences.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'fences'
        content: cap[0]
      continue
    # heading
    if cap = @rules.heading.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'heading'
        content: cap[0]
      continue
    # table no leading pipe (gfm)
    if top and (cap = @rules.nptable.exec(src))
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'table'
        content: cap[0]
      continue
    # lheading
    if cap = @rules.lheading.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'lheading'
        content: cap[0]
      continue
    # hr
    if cap = @rules.hr.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'hr'
        content: cap[0]
      continue
    # blockquote
    if cap = @rules.blockquote.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'blockquote'
        content: cap[0]
      continue
    # list
    if cap = @rules.list.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'list'
        content: cap[0]
      continue
    # html
    if cap = @rules.html.exec(src)
      src = src.substring(cap[0].length)
      @tokens.push
        type: if @options.sanitize then 'paragraph' else 'html'
        content: cap[0]
      continue
    # def
    if !bq and top and (cap = @rules.def.exec(src))
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'def'
        content: cap[0]
      continue
    # table (gfm)
    if top and (cap = @rules.table.exec(src))
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'table'
        content: cap[0]
      continue
    # top-level paragraph
    if top and (cap = @rules.paragraph.exec(src))
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'paragraph'
        content: cap[0]
      continue
    # text
    if cap = @rules.text.exec(src)
      # Top-level should never reach here.
      src = src.substring(cap[0].length)
      @tokens.push
        type: 'text'
        content: cap[0]
      continue
    if src
      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))
  @tokens
